#ifndef GENOTYPE_H
#define GENOTYPE_H
#include <random>
#include "storage.h"
#include <Eigen/Dense>
#include <Eigen/Core>
#include <Eigen/LU>
#include <Eigen/SVD>

using namespace Eigen;
using namespace std;
	#ifdef USE_DOUBLE
		typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> MatrixXdr;
	#else
		typedef Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> MatrixXdr;
	#endif

class genotype {
	std::vector< std::vector <bool> > msb;
	std::vector< std::vector <bool> > lsb;
	
	public:	
		std::vector<int> columnsum;
        std::vector<int> columnsum2;
        std::vector<double> columnmeans;
        std::vector<double> columnmeans2;

		int index;

		bool read_header;
		unsigned char mask;
    	int wordsize;
	    unsigned int unitsperword;
    	int unitsize;
	 	int nrow, ncol;
		int Nsnp, Nindv;
		unsigned char *gtype;

        int Nsegments_hori,segment_size_hori,segment_size_ver,Nsegments_ver;
		int Nbits_hori,Nbits_ver;
		int Nelements_hori,Nelements_ver;
		std::vector< std::vector<int> > p;

		std::vector< std::vector<int> > not_O_j;
		std::vector< std::vector<int> > not_O_i;
		
		void init_means(bool is_missing);

		void read_txt_naive(std::string filename,bool allow_missing);
		void read_txt_mailman (std::string filename,bool allow_missing);

		void read_fam (std::string filename )  ;
		void read_bim (std::string filename )  ;

        /*
		static void set_metadata () ;
		static float get_observed_pj(const unsigned char* line);	
        static int simulate_geno_from_random(float p_j, std::mt19937 &seedr);
*/

		double get_geno(int snpindex,int indvindex,bool var_normalize);
		double get_col_mean(int snpindex);
		double get_col_sum(int snpindex);		
		double get_col_sum2(int snpindes); 
		double get_col_std(int snpindex);		
		void update_col_mean(int snpindex,double value);

		void generate_eigen_geno(MatrixXdr &geno_matrix,bool var_normalize);

};


class data {
	public:
		MatrixXdr gen;
		int index;
};

extern int verbose;
extern vector<vector<int> > jack_bin;
extern vector<int>  jack_block_size;
extern vector<int>  snp_to_jackblock;
extern int Njack;
extern int jack_scheme;
extern int step_size;
extern int step_size_rem;
extern int jack_size;
extern unsigned char mask2;
extern int wordsize;
extern unsigned int unitsperword;
extern int unitsize;
extern int nrow; 
extern int ncol;
extern int Nsnp; 
extern int  Nindv;
extern void set_metadata();
extern bool read_header;
extern int global_snp_index;
extern vector<vector<bool> > annot_bool;
extern int Nbin; 
extern bool use_mailman;

extern vector <data> allgen;
extern vector <genotype> allgen_mail;
extern vector<int> SNP_annot;
extern unsigned char *gtype;
extern std::mt19937 seedr;

int read_bim (string filename) ;
int get_number_of_snps (string bimfilename);

int count_fam  (string filename);
float get_observed_pj(const unsigned char* line);	
int simulate_geno_from_random(float p_j, std::mt19937 &seedr);

void read_bed2 (std::istream& ifs, bool allow_missing, int num_snp) ;
void read_bed_1colannot (std::istream& ifs, bool allow_missing, int num_snp) ;
#endif
